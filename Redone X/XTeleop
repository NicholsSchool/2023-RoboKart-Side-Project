package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.hardware.ColorSensor;

@TeleOp(name="XKartV2", group="Iterative Opmode")
public class XTeleopV2 extends OpMode
{
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private ElapsedTime powerup = new ElapsedTime();
    private XHardwareMap robot = new XHardwareMap();
    ColorSensor colorSensor = null;
    int status;
    double forward;
    double strafe;
    double turn;
    double speed;
    double acceleration = 0.1;
    int marioDrive;
    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        robot.init(hardwareMap);
        //why this work I don't know nor care
         colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    
    @Override
    public void start() {
        runtime.reset();
    }

    
    @Override
    public void loop() {
        double input1 = gamepad1.left_trigger - gamepad1.right_trigger;
        boolean input2 = gamepad2.a;
        boolean input3 = gamepad2.b;
        if(gamepad2.a){
            marioDrive = 1;
        }
        if(gamepad2.b){
            marioDrive = -1;
        }
        if(!gamepad2.b && !gamepad2.a){
            marioDrive = 0;
        }
         if(runtime.seconds() > 0.1 && (input2 || input3)){
            speed = speed + marioDrive * acceleration;
            runtime.reset();
        }
        
        telemetry.addData("marioDrive",marioDrive);
        
        if(runtime.seconds() > 0.1 && input1 != 0){
            speed = speed + input1 * acceleration;
            runtime.reset();
        }
        if(runtime.seconds() > 0.1 && input1 == 0){
            speed = speed - 0.25 * speed;
            runtime.reset();
        }
        telemetry.addData("speed",speed);
        double finalSpeed = Range.clip(speed, -1,0.5);
        
        forward = finalSpeed;
        strafe = 0.7 * Math.abs(finalSpeed) * gamepad1.left_stick_x + 0.7 * Math.abs(finalSpeed) * gamepad2.right_stick_x;
        turn = gamepad1.right_stick_x + gamepad2.left_stick_x;
        
        status = robot.status(colorSensor.red(),colorSensor.green(),colorSensor.blue());
        switch(status){
        case 0:
            robot.move(forward, strafe, turn);
            break;
        case 1:
            robot.speedBuffer(forward, strafe, turn);
            break;
        case 2:
            robot.oilSlick(strafe,turn);
            break;
        case 3:
            robot.speedBoost(forward, strafe, turn);
            break;
        case 4: 
            robot.bannana();
            break;
        }
        
        robot.colorToLights(status);
        
        telemetry.addData("status",status);
    
        telemetry.addData("red",colorSensor.red());
        telemetry.addData("green",colorSensor.green());
        telemetry.addData("blue",colorSensor.blue());
    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
    }

}