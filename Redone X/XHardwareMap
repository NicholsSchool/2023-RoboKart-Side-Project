package org.firstinspires.ftc.teamcode;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import java.util.concurrent.TimeUnit;
import com.qualcomm.robotcore.hardware.ColorSensor;

public class XHardwareMap{
    public DcMotor redMotor , blueMotor, greenMotor, yellowMotor;
    public RevBlinkinLedDriver blinkin = null;
    RevBlinkinLedDriver.BlinkinPattern pattern;
    ColorSensor colorSensor;
    double topSpeed = 0.7;
    double sensitivity = 0.2;
    double acceleration = 0.1;

    HardwareMap hwMap = null;

    private ElapsedTime time = new ElapsedTime();

    public void xDriveHardwareMap(){
    }
    public void init( HardwareMap ahwMap ) 
    {
        // Save reference to Hardware map
        HardwareMap hwMap = ahwMap;  
        
        redMotor  = hwMap.get(DcMotor.class, "redMotor");
        greenMotor  = hwMap.get(DcMotor.class, "greenMotor");
        yellowMotor = hwMap.get(DcMotor.class, "yellowMotor");
        blueMotor = hwMap.get(DcMotor.class, "blueMotor");
        blinkin = hwMap.get(RevBlinkinLedDriver.class,"blinkin");
        colorSensor = hwMap.get(ColorSensor.class, "colorSensor");
        
        yellowMotor.setDirection(DcMotor.Direction.FORWARD);
        redMotor.setDirection(DcMotor.Direction.FORWARD);
        blueMotor.setDirection(DcMotor.Direction.REVERSE);
        greenMotor.setDirection(DcMotor.Direction.REVERSE);
    }

    public void move(double forward, double strafe, double turn){
            double yellowPower = forward - turn * sensitivity;
            double greenPower = forward + turn * sensitivity;
            double redPower = strafe - turn * sensitivity;
            double bluePower = forward + turn * sensitivity;
            blueMotor.setPower(bluePower * topSpeed);
            redMotor.setPower(redPower * topSpeed);
            yellowMotor.setPower(yellowPower * topSpeed);
            greenMotor.setPower(greenPower * topSpeed);
        }
        
    public void colorToLights(int red, int green, int blue){
        if(red > blue && red > green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.RED);
        }
        if(red < blue && blue > green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.BLUE);
        }
        if(red < green && blue < green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.GREEN);
        }

    }

    public void oilSlick(double forward){
        double yellowPower = forward - 1 * sensitivity;
            double greenPower = forward + 1 * sensitivity;
            yellowMotor.setPower(yellowPower * topSpeed);
            greenMotor.setPower(greenPower * topSpeed);
        }
    
    public status(int red, int green, int blue){
        // 1 is red 2 is green 3 is blue 4 is yellow 0 is none
        int color = 0
        if(red > 200 && green < 200){
            color = 1;
        }
        if(green > 200 && red < 200){
            color = 2;
        }
        if(blue > 200){
            color = 3;
        }
        if(red > 200 && green > 200){
            color = 4;
        }
        if(red < 200 && green < 200 && blue < 200){
            color = 0;
        }
        return color;

    }


    
    

}
