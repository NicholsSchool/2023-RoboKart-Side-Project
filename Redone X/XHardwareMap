package org.firstinspires.ftc.teamcode;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import java.util.concurrent.TimeUnit;
import com.qualcomm.robotcore.hardware.ColorSensor;

public class XHardwareMap{
    public DcMotor redMotor , blueMotor, greenMotor, yellowMotor;
    public RevBlinkinLedDriver blinkin = null;
    RevBlinkinLedDriver.BlinkinPattern pattern;
    ColorSensor colorSensor = null;
    double topSpeed = 0.4;
    double sensitivity = 0.4;
    double acceleration = 0.1;

    HardwareMap hwMap = null;

    private ElapsedTime period = new ElapsedTime();

    public void xDriveHardwareMap(){
    }
    public void init( HardwareMap ahwMap ) 
    {
        // Save reference to Hardware map
        HardwareMap hwMap = ahwMap;  
        
        redMotor  = hwMap.get(DcMotor.class, "redMotor");
        greenMotor  = hwMap.get(DcMotor.class, "greenMotor");
        yellowMotor = hwMap.get(DcMotor.class, "yellowMotor");
        blueMotor = hwMap.get(DcMotor.class, "blueMotor");
        blinkin = hwMap.get(RevBlinkinLedDriver.class,"blinkin");
        colorSensor = hwMap.get(ColorSensor.class, "colorSensor");
        
        yellowMotor.setDirection(DcMotor.Direction.FORWARD);
        redMotor.setDirection(DcMotor.Direction.FORWARD);
        blueMotor.setDirection(DcMotor.Direction.REVERSE);
        greenMotor.setDirection(DcMotor.Direction.REVERSE);
    }

        public void move(double forward, double strafe, double turn){
            double yellowPower = forward - turn * sensitivity;
            double greenPower = forward + turn * sensitivity;
            double redPower = -strafe - turn * sensitivity;
            double bluePower = -strafe + turn * sensitivity;
            blueMotor.setPower(bluePower * topSpeed);
            redMotor.setPower(redPower * topSpeed);
            yellowMotor.setPower(yellowPower * topSpeed);
            greenMotor.setPower(greenPower * topSpeed);
        }
        public void oilSlick(double forward){
            double yellowPower = forward - 10 * sensitivity;
            double greenPower = forward + 10 * sensitivity;
            double redPower = -10 * sensitivity;
            double bluePower = 10 * sensitivity;
            yellowMotor.setPower(yellowPower * topSpeed);
            greenMotor.setPower(greenPower * topSpeed);
            redMotor.setPower(redPower * topSpeed);
            blueMotor.setPower(bluePower * topSpeed);
            
            
        }
        public void colorToLights(int red, int green, int blue){
        if(red > blue && red > green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.RED);
        }
        if(red < blue && blue > green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.BLUE);
        }
        if(red < green && blue < green){
            blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.GREEN);
        }
    }
     public void speedBoost(double forward, double strafe, double turn){
            double yellowPower = 2 * forward - turn * sensitivity;
            double greenPower = 2 * forward + turn * sensitivity;
            double redPower = -2 * strafe - turn * sensitivity;
            double bluePower = -2 * strafe + turn * sensitivity;
            blueMotor.setPower(bluePower);
            redMotor.setPower(redPower);
            yellowMotor.setPower(yellowPower);
            greenMotor.setPower(greenPower);
    }
    

}
