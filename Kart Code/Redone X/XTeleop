package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.hardware.ColorSensor;

//orientation:

//      Blue
// Green       Yellow
//      Red
// yellow and green point up red and blue point right by default

@TeleOp(name="XKartV2", group="Iterative Opmode")
public class XTeleopV2 extends OpMode
{
    // Declare OpMode members
    //make instances of elapsed time for acceleration and power up
    //also bring hardware map from XHardwareMap

    private ElapsedTime runtime = new ElapsedTime();
    private ElapsedTime powerUp = new ElapsedTime();
    private XHardwareMap robot = new XHardwareMap();
    ColorSensor colorSensor = null;
    int status;
    double powerup;
    double forward;
    double strafe;
    double turn;
    double speed;
    double acceleration = 0.1;
    int marioDrive;
    
    //init hardware map from XHardwareMap
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        robot.init(hardwareMap);
        //init hardware map from XHardwareMap and bring in color sensor (yes I redfined it you don't have to though)
         colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    
    @Override
    public void start() {
        runtime.reset();
    }

    
    @Override
    public void loop() {
        //create variables that will eventually be used in the move methods
        // input 1 is for the people who want racing game controls
        //input 2 is for the people who want Mario Kart controls 
        
        double input1 = gamepad1.left_trigger - gamepad1.right_trigger;
        boolean input2 = gamepad2.a;
        boolean input3 = gamepad2.b;
        
        //since the buttons are booleans lets assing them to ints to work with them in the accel functions

        if(gamepad2.a){
            marioDrive = 1;
        }
        if(gamepad2.b){
            marioDrive = -1;
        }
        if(!gamepad2.b && !gamepad2.a){
            marioDrive = 0;
        }
        
        //acceleration code for Mario controls
         if(runtime.seconds() > 0.1 && (input2 || input3)){
            speed = speed + marioDrive * acceleration;
            runtime.reset();
        }
        
        //acceleration code for racing game controls
        if(runtime.seconds() > 0.1 && input1 != 0){
            speed = speed + input1 * acceleration;
            runtime.reset();
        }
        //deceleration code for the bot, I didn't even program for Mario controls but it still works
        if(runtime.seconds() > 0.1 && input1 == 0){
            speed = speed - 0.25 * speed;
            runtime.reset();
        }
        telemetry.addData("speed",speed);
        
        //speed control, keeps it from going over
        double finalSpeed = Range.clip(speed, -1,0.5);
        
        //creating the inputs for our move methods 
        forward = finalSpeed;
        strafe = 0.7 * Math.abs(finalSpeed) * gamepad1.left_stick_x + 0.7 * Math.abs(finalSpeed) * gamepad2.right_stick_x;
        turn = gamepad1.right_stick_x + gamepad2.left_stick_x;
        
        // just some powerup control 
        //makes it so the trigger decreases the number of time left on the powerup
        if((gamepad1.b || gamepad2.left_trigger > 0.1) && powerup == 1){
            powerUp.reset();
            powerup = powerup -0.1;
        }
        if((gamepad1.b || gamepad2.left_trigger > 0.1) && powerup > 0 && powerUp.seconds() > 0.1){
            powerUp.reset();
            powerup = powerup -0.1;
        }
        if((gamepad1.b || gamepad2.left_trigger > 0.1) && powerup == 0){
            status = 0;
        }
        

        //status tells us what color the bot is on
        status = robot.status(colorSensor.red(),colorSensor.green(),colorSensor.blue());
        
        //all of this is giving the bot different drive modes based on the color (go to XHardwareMap for config of colors)
        switch(status){
        case 0:
            if(powerup < 0.1 || !(gamepad1.b || gamepad2.left_trigger > 0.1)){
                robot.move(forward, strafe, turn, 1);
            }
            if(powerup > 0.1 && (gamepad1.b || gamepad2.left_trigger > 0.1)){
                robot.move(forward, strafe, turn, 2);  
            }
            break;
        case 1:
            robot.move(forward, strafe, turn, 0.5);
            break;
        case 2:
            robot.move(-forward,-strafe, -turn, 1);
            break;
        case 3:
            robot.move(forward, strafe, turn, 2);
            break;
        case 4: 
            robot.move(forward, strafe, turn + 10, 1);
            break;
        case 5:
            powerup = 1;
            robot.move(forward, strafe, turn, 1);
            
            break;
        }
        
        
        //Makes status effect the light color
        robot.colorToLights(status);
        
        telemetry.addData("status",status);
    
        telemetry.addData("red",colorSensor.red());
        telemetry.addData("green",colorSensor.green());
        telemetry.addData("blue",colorSensor.blue());
        telemetry.addData("powerup",powerup);
    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
    }

}