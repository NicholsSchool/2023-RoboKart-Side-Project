package org.firstinspires.ftc.teamcode;


import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;


public class XMethods{
    XConstants xC = new XConstants();
    
    public HardwareMap hm;
    
    public DcMotor redMotor , blueMotor, greenMotor, yellowMotor;
    public RevBlinkinLedDriver blinkin;
    RevBlinkinLedDriver.BlinkinPattern pattern;
    
    public void init(HardwareMap ahwMap){
    
    hm = ahwMap;
    
    redMotor  = hm.get(DcMotor.class, "redMotor");
    yellowMotor = hm.get(DcMotor.class, "yellowMotor");
    greenMotor  = hm.get(DcMotor.class, "greenMotor");
    blueMotor = hm.get(DcMotor.class, "blueMotor");
    blinkin = hm.get(RevBlinkinLedDriver.class,"blinkin");

    redMotor.setDirection(DcMotor.Direction.FORWARD);
    yellowMotor.setDirection(DcMotor.Direction.FORWARD);
    greenMotor.setDirection(DcMotor.Direction.REVERSE);
    blueMotor.setDirection(DcMotor.Direction.REVERSE);
        
    }   
    public void Move(float x1,float y1,float x2, float currentSpeedX){
        double yellowPower = Range.clip(currentSpeedX - x2 * xC.sensitivity,-xC.getTopSpeedY() / 2, xC.getTopSpeedY());
        double greenPower = Range.clip(currentSpeedX + x2 * xC.sensitivity,-xC.getTopSpeedY() / 2, xC.getTopSpeedY());
        double redPower = Range.clip(currentSpeedX * x1 - x2 * xC.sensitivity,-xC.getTopSpeedX() / 2, xC.getTopSpeedY());
        double bluePower = Range.clip(currentSpeedX * x1 + x2 * xC.sensitivity,-xC.getTopSpeedX() / 2, xC.getTopSpeedY());
        yellowMotor.setPower(yellowPower);
        blueMotor.setPower(bluePower);
        greenMotor.setPower(greenPower);
        redMotor.setPower(redPower);
    }
}
