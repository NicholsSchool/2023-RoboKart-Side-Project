package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;


@TeleOp(name="XKart", group="Iterative Opmode")
public class XTeleop extends OpMode
{
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    public XMethods xM = new XMethods();
    public XConstants xC = new XConstants();
    float currentSpeedX;
    float currentSpeedY;


    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        xM.init(hardwareMap);
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    
    @Override
    public void start() {
        runtime.reset();
    }

    
    @Override
    public void loop() {
        
        float x1 = gamepad1.left_stick_x;
        float x2 = gamepad1.right_stick_x;
        float input = gamepad1.right_trigger - gamepad1.left_trigger;;
        
        //accel code
        
        if(input >= 0){
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.GREEN);
        }else{
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.RED);
        }
        
        if(gamepad1.x){
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.BLUE);
        }
        if(gamepad1.y){
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.RED_ORANGE);
        }
        if(gamepad1.b){
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.VIOLET);
        }
        if(gamepad1.a){
            xM.blinkin.setPattern(RevBlinkinLedDriver.BlinkinPattern.BLUE_GREEN);
        }
        //current speed x = current speed y, not sure why past me made two variables.
        if(runtime.seconds() > 0.1 && input < 0 && currentSpeedX < xC.getTopSpeedY()){
            currentSpeedX =(float) (currentSpeedX + 2 * input * xC.getAcceleration());
            currentSpeedY = (float) (currentSpeedX + 2 *input * xC.getAcceleration());
            runtime.reset();
            
        }
        if(runtime.seconds() > 0.1 && input > 0 && currentSpeedX > -xC.getTopSpeedY() / 2){
            currentSpeedX =(float) (currentSpeedX + 2 * input * xC.getAcceleration());
            currentSpeedY = (float) (currentSpeedX + 2 *input * xC.getAcceleration());
            runtime.reset();
        }
        
        // power goes to 0 if not touched
        
        if(runtime.seconds() > 0.1 && input == 0 && currentSpeedX > 0){
            currentSpeedX =(float) (currentSpeedX - xC.getAcceleration());
            currentSpeedY = (float) (currentSpeedX - xC.getAcceleration());
            runtime.reset();
        }
        if(runtime.seconds() > 0.1 && input == 0 && currentSpeedX < 0){
            currentSpeedX =(float) (currentSpeedX + 2 * xC.getAcceleration());
            currentSpeedY = (float) (currentSpeedX + 2 * xC.getAcceleration());
            runtime.reset();
        }
        
        telemetry.addData("input",input);
        telemetry.addData("speed",currentSpeedX);
        
        xM.Move(x1, currentSpeedY, x2, currentSpeedX);


    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
    }

}